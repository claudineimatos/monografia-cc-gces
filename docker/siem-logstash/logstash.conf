input {
	# Escuta na porta 514/TCP e aplica codec json
	tcp {
		port => 514
		type => eventlog
		codec => json
	}
	# Escuta na porta 5000/TCP por eventos do tipo syslog
	tcp {
		port => 5000
		type => syslog
	}
	# Escuta na porta 5000/UDP por eventos do tipo syslog
	udp {
		port => 5000
		type => syslog
	}
}

filter {
	# Aplica filtros em eventos oriundos do syslog
	if [type] == "syslog" {
		grok {
			patterns_dir => "./patterns"
			match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
			add_field => [ "received_at", "%{@timestamp}" ]
			add_field => [ "received_from", "%{host}" ]
		}
		syslog_pri { }
		# Define timezone como America/Sao_Paulo (GMT -3)
		date {
			match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
			timezone => [ "America/Sao_Paulo" ]
		}

		if [syslog_program] == "sshd" {
			# Aplica padrões para mensagens do daemon SSH
			grok {
				patterns_dir => "./patterns"
				match => { "message" => "%{SSHD_LINE}" }
			}
			# Adiciona campo username para manter padrão de campo para informacão de login do usuário
			if [sshd][user] { 
				mutate {
					add_field => [ "[username]", "%{[sshd][user]}" ] 
				}
			} 
			# Adiciona campo src_ip para manter padrão de campo para informacão de IP de origem
			if [sshd][clientip] { 
				mutate {
					add_field => [ "[src_ip]", "%{[sshd][clientip]}" ] 
				}
			}
			# Adiciona campo src_port para manter padrão de campo para informacão de porta de origem
			if [sshd][clientport] { 
				mutate {
					add_field => [ "[src_port]", "%{[sshd][clientport]}" ] 
				}
			}

			# Captura eventos com mensagem de usuário inválido
			if [syslog_message] =~ "^Invalid user"
			{
				mutate {
					add_tag => "evento_suspeito"
				}

				throttle {
					before_count => -1
					after_count => 3
					period => 60
					key => "%{syslog_program}_usuario_invalido_de_%{[sshd][clientip]}"
					add_tag => "evento_suspeito_repetido"
					add_field => [ "[evento][mensagem]", "%{syslog_message}" ]
					add_field => [ "[evento][programa]", "%{[syslog_program]}" ]
				}
			}
		}
		# Aplica padrões para mensagens do daemon IPTABLES
		if [syslog_program] == "kernel" and [syslog_message] =~ "^IN" {
			grok {
				patterns_dir => "./patterns"
				match => { "message" => "%{IPTABLES}" }
			}
		}   
		# Aplica padrões para mensagens do daemon SUDO
		if [syslog_program] == "sudo" {
			grok {
				patterns_dir => "./patterns"
				match => { "message" => "%{SUDOLINE}" }
				add_field => [ "[username]", "%{[sudo][user]}" ]
			}
		}
	}

	if [type] == "eventlog" {
		mutate {
			# Coloca em caixa baixa alguns valores que estão sempre em caixa alta
			lowercase => [ "EventType", "FileName", "Hostname", "Severity" ]
		}
		mutate {
			# Altera origem para o que a mensagem diz
			rename => [ "Hostname", "@source_host" ]
		}
		date {
			# Converte timestamp de inteiro para UTC
			match => [ "EventReceivedTime", "UNIX" ]
		}
		mutate {
			# Renomeia alguns campos em algo mais útil
			rename => [ "Message", "@message" ]
			rename => [ "Severity", "eventlog_severity" ]
			rename => [ "SeverityValue", "eventlog_severity_code" ]
			rename => [ "Channel", "eventlog_channel" ]
			rename => [ "SourceName", "eventlog_program" ]
			rename => [ "SourceModuleName", "nxlog_input" ]
			rename => [ "Category", "eventlog_category" ]
			rename => [ "EventID", "eventlog_id" ]
			rename => [ "RecordNumber", "eventlog_record_number" ]
			rename => [ "ProcessID", "eventlog_pid" ]
		}
		mutate {
			# Remove campos reundantes
			remove => [ "SourceModuleType", "EventTimeWritten", "EventTime", "EventReceivedTime", "EventType" ]
		}

		if [eventlog_id] == 4625 {
			grok {
				patterns_dir => "./patterns"
				match => { "@message" => "%{EVENTLOG_FAILED_LOGIN_DATA}" }
			}
			grok {
				patterns_dir => "./patterns"
				match => { "@message" => "%{EVENTLOG_NETWORK_INFORMATION}" }
			}

			if [eventlog][account_name] {
				mutate {
					add_field => [ "[username]", "%{[eventlog][account_name]}" ]
				}
			}

			if [eventlog][src_ip] {
				mutate {
					add_field => [ "[src_ip]", "%{[eventlog][src_ip]}" ]
			       		add_field => [ "[src_port]", "%{[eventlog][src_port]}" ]
				}
			}
			
			if [eventlog][account_name] and [eventlog][src_ip] {
				mutate {
					add_tag => "evento_suspeito"
				}

				throttle {
					before_count => -1
					after_count => 3
					period => 60
					key => "%{[eventlog_program]}_usuario_invalido_de_%{[eventlog][src_ip]}"
					add_tag => "evento_suspeito_repetido"
					add_field => [ "[evento][mensagem]", "%{@message}" ]
					add_field => [ "[evento][programa]", "%{[eventlog_program]}" ]
				}
			}
		}
	}

	if [src_ip] {
		# Correlaciona endererecos IP com coordenadas geográficas
		geoip {
			source => "src_ip"
			target => "geoip"
			database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
			add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
			add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
		}
		mutate { 
			convert => [ "[geoip][coordinates]", "float" ]
		}
	}
}

output {
  # Envia eventos para armazenamento no ElasticSearch
  #elasticsearch { host => ELASTICSEARCH_HOST }

  # Envia e-mails ao detectar eventos suspeitos
  if "evento_suspeito_repetido" in [tags] {
    email {
   	    from => "claudineimatos+siem@gmail.com"
   	    subject => "Evento suspeito no host %{host}"
   	    to => "claudineimatos+siem@gmail.com"
   	    via => "sendmail"
   	    body => "Evento suspeito em %{[evento][programa]} no host %{host}.\n\n Mensagem: %{[evento][mensagem]}"
   	    options => { "location" => "/usr/sbin/sendmail" }
    }
  }
  stdout { codec => rubydebug }
}
