input {
        tcp {
                port => 514
                type => eventlog
		codec => json
        }
        tcp {
                port => 5000
                type => syslog
        }
        udp {
                port => 5000
                type => syslog
        }
}

filter {
        if [type] == "syslog" {
                grok {
                        patterns_dir => "./patterns"
                        match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
                        add_field => [ "received_at", "%{@timestamp}" ]
                        add_field => [ "received_from", "%{host}" ]
                }
                syslog_pri { }
                date {
                        match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
                        timezone => [ "America/Sao_Paulo" ]
                }

                if [syslog_program] == "sshd" {
                        grok {
                                patterns_dir => "./patterns"
                                match => { "message" => "%{SSHD_LINE}" }
                        }

			if [sshd][user] { 
				mutate {
					add_field => [ "[username]", "%{[sshd][user]}" ] 
				}
			} 
			if [sshd][clientip] { 
				mutate {
					add_field => [ "[src_ip]", "%{[sshd][clientip]}" ] 
				}
			}
			if [sshd][clientport] { 
				mutate {
					add_field => [ "[src_port]", "%{[sshd][clientport]}" ] 
				}
			}

			if [syslog_message] =~ "^Invalid user"
			{
				throttle {
					before_count => -1
					after_count => 3
					period => 60
					key => "%{syslog_program}_invalid_user_from_%{[sshd][clientip]}"
					add_tag => "throttled"
					add_field => [ "[issue][message]", "%{syslog_message}" ]
					add_field => [ "[issue][target_program]", "%{[syslog_program]}" ]
				}
			}
                }
                if [syslog_program] == "kernel" and [syslog_message] =~ "^IN" {
                        grok {
                                patterns_dir => "./patterns"
                                match => { "message" => "%{IPTABLES}" }
                        }
                }   
                if [syslog_program] == "sudo" {
                        grok {
                                patterns_dir => "./patterns"
                                match => { "message" => "%{SUDOLINE}" }
                                add_field => [ "[username]", "%{[sudo][user]}" ]
                        }
                }
        }

	if [type] == "eventlog" {
		mutate {
			# Lowercase some values that are always in uppercase
			lowercase => [ "EventType", "FileName", "Hostname", "Severity" ]
		}
		mutate {
			# Set source to what the message says
			rename => [ "Hostname", "@source_host" ]
		}
		date {
			# Convert timestamp from integer in UTC
			match => [ "EventReceivedTime", "UNIX" ]
		}
		mutate {
			# Rename some fields into something more useful
			rename => [ "Message", "@message" ]
			rename => [ "Severity", "eventlog_severity" ]
			rename => [ "SeverityValue", "eventlog_severity_code" ]
			rename => [ "Channel", "eventlog_channel" ]
			rename => [ "SourceName", "eventlog_program" ]
			rename => [ "SourceModuleName", "nxlog_input" ]
			rename => [ "Category", "eventlog_category" ]
			rename => [ "EventID", "eventlog_id" ]
			rename => [ "RecordNumber", "eventlog_record_number" ]
			rename => [ "ProcessID", "eventlog_pid" ]
		}
		mutate {
			# Remove redundant fields
			remove => [ "SourceModuleType", "EventTimeWritten", "EventTime", "EventReceivedTime", "EventType" ]
		}

                if [eventlog_id] == "4625" {
                        grok {
                                match => { "message" => ".*Account Name:\t\t%{WORD:[eventlog][account_name]}.*Source Network Address:\t%{IP:[eventlog][source_address]}" }
				add_field => [ "[user]", "%{[eventlog][account_name]}" ] 
				add_field => [ "[src_ip]", "%{[eventlog][source_address]}" ] 
                        }
		}
	}

        if [src_ip] {
                geoip {
                        source => "src_ip"
                        target => "geoip"
			database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
                        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
                        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
                }
                mutate { 
                        convert => [ "[geoip][coordinates]", "float" ]
                }
        }
}

output {
  #elasticsearch { host => ELASTICSEARCH_HOST }
  if "throttled" in [tags] {
    email {
   	    from => "claudineimatos+siem@gmail.com"
   	    subject => "Suspicious event on %{host}"
   	    to => "claudineimatos+siem@gmail.com"
   	    via => "sendmail"
   	    body => "Evento suspeito em %{[issue][target_program]} no host %{host}.\n\n Mensagem: %{[issue][message]}"
   	    options => { "location" => "/usr/sbin/sendmail" }
    }
  }
  stdout { codec => rubydebug }
}
