input {
        tcp {
                port => 5000
                type => syslog
        }
        udp {
                port => 5000
                type => syslog
        }
}

filter {
        if [type] == "syslog" {
                grok {
                        patterns_dir => "./patterns"
                        match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
                        add_field => [ "received_at", "%{@timestamp}" ]
                        add_field => [ "received_from", "%{host}" ]
                }
                syslog_pri { }
                date {
                        match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
                        timezone => [ "America/Sao_Paulo" ]
                }

                if [syslog_program] == "sshd" {
                        grok {
                                patterns_dir => "./patterns"
                                match => { "message" => "%{SSHD_LINE}" }
                        }

			if [sshd][user] { 
				mutate {
					add_field => [ "[username]", "%{[sshd][user]}" ] 
				}
			} 
			if [sshd][clientip] { 
				mutate {
					add_field => [ "[src_ip]", "%{[sshd][clientip]}" ] 
				}
			}
			if [sshd][clientport] { 
				mutate {
					add_field => [ "[src_port]", "%{[sshd][clientport]}" ] 
				}
			}
                }
                if [syslog_program] == "kernel" and [syslog_message] =~ "^IN" {
                        grok {
                                patterns_dir => "./patterns"
                                match => { "message" => "%{IPTABLES}" }
                        }
                }   
                if [syslog_program] == "sudo" {
                        grok {
                                patterns_dir => "./patterns"
                                match => { "message" => "%{SUDOLINE}" }
                                add_field => [ "[username]", "%{[sudo][user]}" ]
                        }
                }
        }

        if [src_ip] {
                geoip {
                        source => "src_ip"
                        target => "geoip"
			database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
                        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
                        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
                }
                mutate { 
                        convert => [ "[geoip][coordinates]", "float" ]
                }
        }
}

output {
  #elasticsearch { host => ELASTICSEARCH_HOST }
  stdout { codec => rubydebug }
}
